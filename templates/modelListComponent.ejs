import { useState } from 'react'

import { Link, routes } from '@redwoodjs/router'

import SearchWidget from 'src/components/arwdmin/SearchWidget'
import { truncate, truncateId, truncateMaybeId, checkboxInputTag, formatEnum, timeTag } from 'src/lib/arwdminFormatters'

const <%= model.pluralName %> = ({ <%= model.camelPluralName %> }) => {
  const [highlightedRow, setHighlightedRow] = useState(-1)

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete <%= model.name %> ' + id + '?')) {
      // TODO: Implement
      // delete<%= model.name %>({ variables: { id } })
    }
  }

  return (
    <div className="arwdmin-model-list">
      <header>
        <h2><%= model.humanizedPluralName %></h2>
        <Link
          to={routes.arwdminNew<%= model.pascalName %>()}
          className="arwdmin-button"
        >
          New <%= model.humanizedName %>
        </Link>
      </header>
      <SearchWidget routesFn={routes.arwdmin<%= model.pluralName %>} />
      <div className="arwdmin-table-wrapper">
        <table className="arwdmin-table">
          <thead>
            <tr>
              <%_ for (let field of modelFields) { -%>
                <%_ const renderData = getRenderData(field.name) -%>
                <th><%= renderData.displayName %></th>
              <%_ } -%>
              <th>
                <span className="sr-only">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody>
            {<%= model.camelPluralName %>.map((<%= model.camelName %>) => (
              <tr
                key={<%= model.camelName %>.id}
                onClick={() => {
                  // Toggle highlight if clicking on the same row again
                  if (highlightedRow === <%= model.camelName %>.id) {
                    setHighlightedRow(-1)
                  } else {
                    setHighlightedRow(<%= model.camelName %>.id)
                  }
                }}
                className={highlightedRow === <%= model.camelName %>.id ? 'arwdmin-row-highlight' : ''}
              >
                <%_ for (let field of modelFields) { -%>
                  <%_ const renderData = getRenderData(field.name) -%>
                  <td>{<%= renderData.listDisplayFunction %>(<%= model.camelName %>.<%= field.name %>)}</td>
                <%_ } -%>
                <td>
                  <nav>
                    <Link
                      to={routes.arwdmin<%= model.pascalName %>({ id: <%= model.camelName %>.id })}
                      title={'Show <%= model.name %> ' + <%= model.camelName %>.id + ' details'}
                      className="arwdmin-button"
                    >
                      Show
                    </Link>
                    <Link
                      to={routes.arwdminEdit<%= model.pascalName %>({ id: <%= model.camelName %>.id })}
                      title={'Edit <%= model.name %> ' + <%= model.camelName %>.id}
                      className="arwdmin-button"
                    >
                      Edit
                    </Link>
                    <button
                      type="button"
                      title={'Delete <%= model.name %> ' + <%= model.camelName %>.id}
                      onClick={() => onDeleteClick(<%= model.camelName %>.id)}
                      className="arwdmin-button arwdmin-button-delete"
                    >
                      Delete
                    </button>
                  </nav>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

export default <%= model.pluralName %>
